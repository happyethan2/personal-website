---
import Base from '../../layouts/Base.astro';
import { getEntryBySlug } from 'astro:content';
import MacroBar from '../../components/MacroBar.astro';

const { slug } = Astro.params;
const recipe = await getEntryBySlug('recipes', slug);
if (!recipe || recipe.data.draft) {
  throw new Response("Not Found", { status: 404 });
}
const d = recipe.data;
const total_mins = (d.prep_mins ?? 0) + (d.cook_mins ?? 0);

/** Daily Intake references (generic adult DV-style; can be swapped for keto-specific later) */
const DI = {
  sodium: 4000,     // mg
  potassium: 3350,  // mg
  magnesium: 400,   // mg
  calcium: 1150,    // mg
  iron: 13,         // mg
};

const NUTRIENT_LABEL = {
  sodium: "Sodium",
  potassium: "Potassium",
  magnesium: "Magnesium",
  calcium: "Calcium",
  iron: "Iron",
};

/** Helper: read either `<key>_mg` or `<key>` from `d.nutrition` */
const getMg = (obj, key) => {
  if (!obj) return undefined;
  const val = obj[`${key}_mg`] ?? obj[key];
  return typeof val === "number" ? val : undefined;
};

/** Build table rows (only for nutrients present in frontmatter) */
const KEYS = ["sodium", "potassium", "magnesium", "calcium", "iron"];
const nutritionRows = KEYS.map((k) => {
  const value = getMg(d.nutrition, k);
  if (value === undefined) return null;
  const di = DI[k];
  const pct = Math.round((value / di) * 100);
  return { key: k, label: NUTRIENT_LABEL[k], value, unit: "mg", pct };
}).filter(Boolean);
---

<Base title={`${d.title} • Recipe`}>
  <a href="/recipes" class="text-sm text-cyan-400 hover:text-cyan-300 mt-6 inline-block">← All recipes</a>

  <header class="space-y-6 mt-4">
    <h1 class="text-3xl font-semibold">{d.title}</h1>
    <p class="text-slate-300">{d.description}</p>

    {d.image
      ? (typeof d.image === 'string'
          ? <img src={d.image} alt={d.title} class="w-full rounded-xl border border-slate-800" />
          : <img src={d.image.src} alt={d.title} class="w-full rounded-xl border border-slate-800" />
        )
      : null}

    <!-- Serves • kcal • Prep • Cook -->
    <section class="grid grid-cols-2 sm:grid-cols-4 gap-3 text-sm">
      <div class="rounded border border-slate-800 bg-slate-900/50 p-3">
        <div class="text-slate-400">Serves</div>
        <div class="font-medium">{d.servings}</div>
      </div>
      <div class="rounded border border-slate-800 bg-slate-900/50 p-3">
        <div class="text-slate-400">kcal (per serving)</div>
        <div class="font-medium">{d.calories_kcal}</div>
      </div>
      <div class="rounded border border-slate-800 bg-slate-900/50 p-3">
        <div class="text-slate-400">Prep</div>
        <div class="font-medium">{d.prep_mins} min</div>
      </div>
      <div class="rounded border border-slate-800 bg-slate-900/50 p-3">
        <div class="text-slate-400">Cook</div>
        <div class="font-medium">{d.cook_mins} min</div>
      </div>
    </section>

    <section class="space-y-2">
      <MacroBar
        calories_kcal={d.calories_kcal}
        fat_g={d.fat_g}
        protein_g={d.protein_g}
        carbs_g={d.carbs_g}
      />
    </section>
  </header>

  <!-- Ingredients first on mobile; split at lg -->
  <section class="grid mt-8 lg:grid-cols-2 gap-10">
    <div class="space-y-3">
      <h2 class="text-xl font-semibold">Ingredients</h2>
      <ul class="ingredients-list">
        {d.ingredients.map((line) => <li>{line}</li>)}
      </ul>
    </div>

    <div class="space-y-3">
      <h2 class="text-xl font-semibold">Method</h2>
      <ol class="method-steps">
        {d.method.map((step) => <li>{step}</li>)}
      </ol>
    </div>
  </section>

  {nutritionRows.length > 0 && (
    <section class="mt-10 space-y-6">
      <h2 class="text-xl font-semibold">Key Nutrition (per serving)</h2>
      <div class="overflow-x-auto rounded-xl border border-slate-800">
        <table class="w-full table-auto text-sm">
          <colgroup>
            <col class="w-[40%]" />
            <col class="w-[35%]" />
            <col class="w-[25%]" />
          </colgroup>

          <thead class="bg-white/5">
            <tr>
              <th class="px-6 py-3 text-left font-medium">Nutrient</th>
              <th class="px-6 py-3 text-left font-medium">Amount</th>
              <th class="px-6 py-3 text-left font-medium">% DI</th>
            </tr>
          </thead>

          <tbody class="divide-y divide-white/5">
            {nutritionRows.map((r) => (
              <tr>
                <td class="px-6 py-3">{r.label}</td>
                <td class="px-6 py-3">{r.value} {r.unit}</td>
                <td class="px-6 py-3">{r.pct}%</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <p class="text-xs text-slate-400">
        * %DI uses general adult daily intakes: Na 4000 mg; K 3350 mg; Mg 400 mg; Ca 1150 mg; Fe 13 mg
      </p>
    </section>
  )}
</Base>
